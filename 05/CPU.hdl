// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // 2:J1 1:J2 0:J3 
    // 5:D1 4:D2 3:D3
    // 11:C1 10:C2 9:C3 8:C4 7:C5 6:C6
    // 12:COMP_A

    PARTS:
    Not16(in = instruction, out[0..15] = ninstruction);
    Not(in = instruction[15], out = loadA0);

    And(a = instruction[15], b = instruction[5], out = loadA1);
    And(a = instruction[15], b = instruction[4], out = loadD);
    And(a = instruction[15], b = instruction[3], out = writeM);

    Or(a = loadA0, b = loadA1, out = loadA);
    
    Not(in = zr, out = nzr);
    Not(in = ng, out = nng);

    And(a = nzr, b = nng, out = gt);
    And(a = instruction[0], b = gt, out = jgt);
    And(a = instruction[1], b = zr, out = jz);
    And(a = instruction[2], b = ng, out = jlt);
    Or(a = jgt, b = jz, out = jgtz);
    Or(a = jgtz, b = jlt, out = jump0);
    And(a = instruction[15], b = jump0, out = jump);
    
    DRegister(in = outAlu, load = loadD, out = d);

    Mux16(a = instruction, b = outAlu, sel = instruction[15], out = outAluInst);
    ARegister(in = outAluInst, load = loadA, out[0..14] = addressM, out = a);
    Mux16(a = a, b = inM, sel = instruction[12], out = am);

    ALU(x = d, y = am,
      zx = instruction[11], nx = instruction[10],
      zy = instruction[9],  ny = instruction[8],
      f = instruction[7], no = instruction[6],
      out = outM, out = outAlu,
      zr = zr, ng = ng);

    PC(in = a, inc = true, reset = reset, load = jump, out[0..14] = pc);
}